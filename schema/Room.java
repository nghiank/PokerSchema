// automatically generated by the FlatBuffers compiler, do not modify

package schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Room extends Table {
  public static Room getRootAsRoom(ByteBuffer _bb) { return getRootAsRoom(_bb, new Room()); }
  public static Room getRootAsRoom(ByteBuffer _bb, Room obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Room __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public PlayerInSession players(int j) { return players(new PlayerInSession(), j); }
  public PlayerInSession players(PlayerInSession obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int playersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createRoom(FlatBufferBuilder builder,
      int nameOffset,
      int playersOffset) {
    builder.startObject(2);
    Room.addPlayers(builder, playersOffset);
    Room.addName(builder, nameOffset);
    return Room.endRoom(builder);
  }

  public static void startRoom(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addPlayers(FlatBufferBuilder builder, int playersOffset) { builder.addOffset(1, playersOffset, 0); }
  public static int createPlayersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlayersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRoom(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

